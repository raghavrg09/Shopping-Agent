from dotenv import load_dotenv
from src.data import PRODUCTS,DISCOUNTS,SHIPPING_DATA,PRICE_COMPARISON, RETURN_POLICIES
from src.llm_model import model
load_dotenv()


def tool_search_products(name:str=None, category:str=None, color:str=None, price_range:tuple=None, size:float=None):
    """
    Search for products based on user criteria using LLM.
    
    :param name: Product name to search for.
    :param category: Category of the product.
    :param color: Desired color of the product.
    :param price_range: Tuple (min_price, max_price) to filter products by price.
    :param size: Desired size of the product.
    :return: List of matching products as generated by LLM.
    """
    prompt = f"""Search for a {category} named {name} in {color} color, priced between {price_range} in size {size}.
    Available products are:
    {PRODUCTS}
    
    Instructions: Do not write any code, just return the product details if any
    
    Output should be the close matching product along with its details.
    """

    return model.invoke(prompt).content



def tool_estimate_shipping(store:str, shipping_type:str):
    """
    Estimate shipping time and cost based on store and shipping type.
    
    :param store: Name of the store.
    :param shipping_type: "standard" or "express" shipping.
    :return: Dictionary containing shipping days and cost.
    """
    return SHIPPING_DATA.get(store, {}).get(shipping_type, {"days": None, "cost": None})


def tool_apply_discount(store:str, base_price:float, promo_code:str):
    """
    Apply discount if the promo code is valid for the given store.
    
    :param store: Store where the purchase is being made.
    :param base_price: Original price of the product.
    :param promo_code: Discount code.
    :return: Final price after applying the discount.
    """
    discount = DISCOUNTS.get(promo_code)
    if discount and store in discount.get("applicable_stores", []):
        discount_amount = (discount["discount_percent"] / 100) * base_price
        return base_price - discount_amount
    return base_price


def tool_compare_prices(product_name:str, product_price:float):
    """
    Compare prices of a specific product across different online stores.
    
    :param product_name: Name of the product to compare.
    :param product_price: Price of the product to compare.
    :return: List of dictionaries with store names and prices.
    """
    prompt = f"""User is asking for a price comparison for the product: {product_name} having a price of {product_price}.
    Your task is to find better deals if any from our DB.
    Available products in our database are:
    {PRICE_COMPARISON}
    
    Instructions: Do not write any code, just return the product details if any
    See if there are any better price deals for the product available.

    Output will be a better deal if available else say 'no better deals found'
    """

    return model.invoke(prompt).content


def tool_get_return_policy(store:str):
    """
    Get the return policy of a specific store.
    
    :param store: Name of the store.
    :return: Return policy as a string.
    """
    return RETURN_POLICIES.get(store, "Return policy not available.")
